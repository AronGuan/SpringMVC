<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/tx 
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/mvc 
            http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- 配置自动扫描的包 -->
	<context:component-scan base-package="pers.aron.springmvc"></context:component-scan>

	<!-- 配置视图解析器 :如何把handler方法返回值解析为实际的物理视图-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>	
	
	<!-- 将在 SpringMVC 上下文中定义一个
		DefaultServletHttpRequestHandler,
		它会对进入 DispatcherServlet 的
		请求进行筛查，如果发现是没有经过映射的请求，就将该请求交由 WEB
		应用服务器默认的 Servlet 处理，如果不是静态资源的请求，才由
		DispatcherServlet 继续处理 
		
		一般 WEB 应用服务器默认的 Servlet 的名称都是 default。若所使用的
		WEB 服务器的默认 Servlet 名称不是 default，则需要通过 defaul-tservlet-name 属性显式指定
		-->	
	<mvc:default-servlet-handler/>
	
	<!--  <mvc:annotation-driven /> 会自动注
			册RequestMappingHandlerMapping
			、RequestMappingHandlerAdapter 与
			ExceptionHandlerExceptionResolver 三个bean。
			• 还将提供以下支持：
			– 支持使用 ConversionService 实例对表单参数进行类型转换
			– 支持使用 @NumberFormat annotation、@DateTimeFormat
			注解完成数据类型的格式化
			– 支持使用 @Valid 注解对 JavaBean 实例进行 JSR 303 验证
			– 支持使用 @RequestBody 和 @ResponseBody 注解-->
	<mvc:annotation-driven conversion-service="conversionService"/>
	<!--  <mvc:annotation-driven/>  -->
	<!-- 配置ConversionService -->
	
	<!-- <bean id="conversionService"
			class="org.springframework.context.support.ConversionServiceFactoryBean"> -->
	<!-- 使用这个既可以使用spingMVC提供的格式化，也可以自定义转换器 -->
	<bean id="conversionService"
			class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<set>
				<ref bean="employeeConverter"></ref>
			</set>
		</property>
	</bean>
	
	<!-- 配置国际化资源文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="i18n"></property>
	</bean>
	
	<!-- 配置SessionLocalResolver 要改成CookieLocaleResolver，要不然会报错-->
	<bean id="localeResolver"
			class="org.springframework.web.servlet.i18n.CookieLocaleResolver"></bean>
			
	
	<mvc:interceptors>
		<!-- 配置自定义的拦截器 -->
		<bean class="pers.aron.springmvc.interceptors.FirstInterceptor"></bean>
		
		<!-- 配置拦截器(不)作用的路径 -->
		<mvc:interceptor>
			<mvc:mapping path="/emps"/>
			<bean class="pers.aron.springmvc.interceptors.SecondInterceptor"></bean>
		</mvc:interceptor>
		
		<!-- 配置LocaleChanceInterceptor -->
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"></bean>
	</mvc:interceptors>

	<!-- <mvc:view-controller path="/i18n" view-name="i18n"/> -->
	<mvc:view-controller path="/i18n2" view-name="i18n2"/>
	
	<!-- 配置MultipartResolver 用于文件上传-->
	<bean id="multipartResolver"
			class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"></property>	
		<property name="maxUploadSize" value="1024000"></property>
	</bean>
	</beans>